name: CI

on:
  push:
    branches: [ main, cursor/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
  
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff
    
    - name: Run ruff
      run: |
        ruff check tools/ --output-format=github
  
  validate-manifest:
    name: Validate Protocol Manifest
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Verify protocol files match manifest
      run: |
        python3 << 'EOF'
        import hashlib
        import json
        from pathlib import Path
        
        # Load manifest
        manifest_path = Path(".repo/protocol_manifest.json")
        if not manifest_path.exists():
            print("❌ Protocol manifest not found")
            exit(1)
        
        manifest = json.loads(manifest_path.read_text())
        
        # Check each file
        mismatches = []
        for file_path, expected_hash in manifest["files"].items():
            path = Path(file_path)
            if not path.exists():
                mismatches.append(f"Missing: {file_path}")
                continue
            
            actual_hash = hashlib.sha256(path.read_bytes()).hexdigest()
            if actual_hash != expected_hash:
                mismatches.append(f"Modified: {file_path}")
        
        if mismatches:
            print("❌ Protocol manifest mismatch:")
            for msg in mismatches:
                print(f"  - {msg}")
            print("\nTo fix: Update .repo/protocol_manifest.json with current hashes")
            exit(1)
        
        print("✅ Protocol manifest validated")
        EOF
  
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for broken links in markdown
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
    
    - name: Verify required docs exist
      run: |
        required_docs=(
          "README.md"
          "GETTING_STARTED.md"
          "PROTOCOL.md"
          "ARCHITECTURE.md"
          "GITHUB_SETUP.md"
          "CONTRIBUTING.md"
        )
        
        missing=()
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            missing+=("$doc")
          fi
        done
        
        if [ ${#missing[@]} -gt 0 ]; then
          echo "❌ Missing required documentation:"
          printf '  - %s\n' "${missing[@]}"
          exit 1
        fi
        
        echo "✅ All required documentation present"
